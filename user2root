USER2ROOT功能修改点
实现功能描述：在user版本上执行adb shell setprop persist.tctphone.root 1可以打开root权限，
执行adb shell setprop persist.tctphone.root 0关闭root权限。

1.打开编译功能宏：
system/core/adb/Android.mk：
LOCAL_CFLAGS += -DALLOW_ADBD_ROOT=$(if $(filter userdebug user eng,$(TARGET_BUILD_VARIANT)),1,0)
LOCAL_CFLAGS += -DALLOW_ADBD_NO_AUTH=$(if $(filter userdebug eng,$(TARGET_BUILD_VARIANT)),1,0)

ifneq (,$(filter userdebug user eng,$(TARGET_BUILD_VARIANT)))
LOCAL_CFLAGS += -DALLOW_ADBD_DISABLE_VERITY=1
endif

2.修改init.usb.rc:
# adbd is controlled via property triggers in init.<platform>.usb.rc
service adbd /system/bin/adbd --root_seclabel=u:r:su:s0
    class core
    socket adbd stream 660 system system
    disabled
    seclabel u:r:adbd:s0


# adbd on at boot in emulator
on property:ro.kernel.qemu=1
    start adbd

on property:persist.tctphone.root=1
    setprop service.adb.root 1


on property:persist.tctphone.root=0
    stop adbd
    setprop service.adb.root 0
    start adbd

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    start console
	restart adbd
    write /sys/class/android_usb/android0/enable 1

3. 修改adbd ：
static bool should_drop_privileges() {
…........................................................................
    //add by gtguo for user2root
    std::string user2root = android::base::GetProperty("persist.tctphone.root", "");
    if(user2root == "1"){
		ro_debuggable = true;
    }
…........................................................................
}

static void drop_privileges(int server_port) {
…........................................................................
    //add by gtguo for user2root,if persist.tctphone.root = 1, restart adbd without root_seclabel
    	std::string user2root = android::base::GetProperty("persist.tctphone.root", "");
    	if(user2root == "1"){
			root_seclabel = nullptr;
    	}
    //end
…........................................................................
}

4.修改selinux：
security/selinux/selinuxfs.c：
	if (new_value != selinux_enforcing) {
		//length = task_has_security(current, SECURITY__SETENFORCE);
		//if (length)
		//	goto out;

user2root.te:
allow adbd self:capability { dac_override dac_read_search };
allow platform_app sysfs_kgsl:dir { search };
allow adbd ctl_mdnsd_prop:property_service { set };
allow adbd self:process { setcurrent };

shell.te:
# jason.kim 2018.6.18 Administrator property
allow shell administrator_prop:property_service set;
allow shell administrator_prop:file { open read getattr };
allow shell tct_root_prop:file { open read getattr };
allow shell tct_root_prop:property_service set;
allow shell ctl_default_prop:property_service set;

sepolicy/property_contexts:
persist.tctphone.root               u:object_r:tct_root_prop:s0

adbd.te:
allow adbd administrator_prop:file { open read getattr };
allow adbd tct_root_prop:file { open read getattr };

property.te:
type tct_root_prop, property_type;
